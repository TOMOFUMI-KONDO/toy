package parser

import "github.com/TOMOFUMI-KONDO/toy/ast"

type Toy Peg {
    ast.Program
}

program <- topLevel* !.

topLevel <- functionDefinition / globalVariableDefinition

functionDefinition <- 'define' space identifier '(' ( identifier ( ',' identifier )* )? ')' space blockExpression
globalVariableDefinition <- 'global' space identifier '=' expression space

expression <-  ifExpression / whileExpression / blockExpression / assignment / comparative

ifExpression <- 'if' space comparative space blockExpression ( 'else' space blockExpression )?
whileExpression <- 'while' space comparative space blockExpression
blockExpression <- '{' space? expression* space? '}' space?
assignment <- identifier '=' expression space

println <- 'println' '(' expression ')'
functionCall <- identifier '(' ( expression ( ',' expression )* )? ')'

comparative <- additive ( comparativeOperator additive )*
additive <- multitive ( additiveOperator multitive )*
multitive <- primary ( multitiveOperator primary )*

primary <- ( '(' comparative ')' ) / println / functionCall / identifier / integer

comparativeOperator <- '<' / '>' / '<=' / '>=' / '==' / '!='
additiveOperator <- '+' / '-'
multitiveOperator <- '*' / '/'

identifier <- [a-zA-Z]+
integer <- [1-9] [0-9]*
space <- [ \t\r\n]+
